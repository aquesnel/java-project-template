/*
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    // test code coverage report
    id('jacoco')
    
    // eclipse IDE plugin with annotation processing
    //id "eclipse"
    id("com.diffplug.eclipse.apt").version("3.44.0")
    // code formatter plugin
    id("com.diffplug.spotless").version("6.25.0")
}
 
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    annotationProcessor 'io.soabase.record-builder:record-builder-processor:41'
    compileOnly 'io.soabase.record-builder:record-builder-core:41'
	
    implementation 'com.google.guava:guava:31.1-jre'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'
    implementation "org.jcommander:jcommander:1.83"
	implementation 'org.slf4j:slf4j-api:2.0.16'

	runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl:2.24.1'
	runtimeOnly 'org.apache.logging.log4j:log4j-api:2.24.1'
	runtimeOnly 'org.apache.logging.log4j:log4j-core:2.24.1'
	runtimeOnly 'org.apache.logging.log4j:log4j-layout-template-json:2.24.1'
	
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.3'
	testImplementation 'org.mockito:mockito-core:5.14.2'
	
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher:1.11.3'
}

application {
    mainClass = 'io.github.aquesnel.examples.Main'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
	useJUnitPlatform()
	jvmArgs('-XX:+EnableDynamicAgentLoading') // For Mockito
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacoco {
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    
    reports {
        html.required = true
    }
}
jacocoTestCoverageVerification {
    dependsOn test
    dependsOn jacocoTestReport // generate the report for debugging a coverage failure
    
    // DOCS: https://www.jacoco.org/jacoco/trunk/doc/ant.html : Element check
    violationRules {
        rule {
            enabled = true
            element = "BUNDLE"
            includes = ["*"]
            excludes = []

            limit {
                counter = "INSTRUCTION"
                value = "COVEREDRATIO"
                minimum = 0.01
            }
            limit {
                counter = "BRANCH"
                value = "COVEREDRATIO"
                minimum = 0.00
            }
        }
    }
}
tasks.check.dependsOn(jacocoTestCoverageVerification)

spotless {
  	java {
    	googleJavaFormat()
  	}
}

eclipse {
    project {
        natures 'org.eclipse.buildship.core.gradleprojectnature'
    }
    classpath {
        file.beforeMerged { cp ->
			cp.entries.add( new org.gradle.plugins.ide.eclipse.model.SourceFolder('.apt_generated', null) )
        }
    }
}
